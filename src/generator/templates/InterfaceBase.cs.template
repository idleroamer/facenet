// Code generated by facenet. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Tmds.DBus;

namespace {{module.qualified_name}}
{
    [Dictionary]
    public class {{interface.name}}Properties
    {
        {% for property in interface.properties %}
        {% if property.readonly %}
        [Property(Access = PropertyAccess.Read)]
        {% endif %}
        public {{property.facenet_type}} {{property.name}};
        {% endfor %}
        [Property(Access = PropertyAccess.Read)]
        public bool ready;

        public {{interface.name}}Properties()
        {
            {% for property in interface.properties %}
            {% if property.facenet_concrete_type != "" %}
            {{property.name}} = new {{property.facenet_concrete_type}}{};
            {% endif %}
            {% endfor %}
        }
    }

    public abstract class I{{interface.name}}
    {
	    protected {{interface.name}}Properties _Properties;

        public I{{interface.name}}() 
        {
            _Properties = new {{interface.name}}Properties();
            _Properties.ready = true;
        }

        public {{interface.name}}Properties Properties
        {
            get => _Properties;
        }

        {% for property in interface.properties %}
        public {{property.facenet_type}} {{property.name}}
        {
            get => _Properties.{{property.name}};
            set => Set{{property.name}}(value);
        }
	    {% endfor %}
        public bool ready
        {
            get => _Properties.ready;
        }

        {% for property in interface.properties %}
        public virtual void Set{{property.name}}({{property.facenet_type}} value)
        {
            if (_Properties.{{property.name}} != value) {
                _Properties.{{property.name}} = value;
                {{property.name}}Changed?.Invoke(value);
            }
        }
	    {% endfor %}
        public virtual void SetReady(bool value)
        {
            if (_Properties.ready != ready) {
                _Properties.ready = ready;
                readyChanged?.Invoke(ready);
            }
        }

        {% for operation in interface.operations %}
        public abstract Task{% if operation.has_return_value %}<{{operation.facenet_type}}>{% endif %} {{operation.name}}Async({%- for parameter in operation.parameters -%} {{parameter.facenet_type}} {{parameter.name}}{{ ", " if not loop.last else "" }}{% endfor %});
        {% endfor %}

        {% for signal in interface.signals %}
        public event Action<{{signal.name}}Args> {{signal.name}};
        protected virtual void On{{signal.name}}({{signal.name}}Args e)
        {
            {{signal.name}}?.Invoke(e);
        }
        {% endfor %}

        {% for property in interface.properties %}
        public event Action<{{property.facenet_type}}> {{property.name}}Changed;
	    {% endfor %}
        public event Action<bool> readyChanged;

        {% for property in interface.properties %}
        protected virtual void On{{property.name}}Changed({{property.facenet_type}} e)
        {
            {{property.name}}Changed?.Invoke(e);
        }
	    {% endfor %}
        protected virtual void OnReadyChanged(bool e)
        {
            readyChanged?.Invoke(e);
        } 
    }
}
