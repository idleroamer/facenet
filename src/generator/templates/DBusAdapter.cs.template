// Code generated by facenet. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Tmds.DBus;
using facenet;

namespace {{module.qualified_name}}
{
    public class {{interface.name}}DBusAdapter : IDBus{{interface.name}}
    {
        protected static ObjectPath _DefaultPath = new ObjectPath("/{{interface.qualified_name|replace(".","/")}}");
        private readonly ObjectPath _Path;
        protected I{{interface.name}} _impl;

	    public ObjectPath ObjectPath { get => _Path;}

        public {{interface.name}}DBusAdapter(I{{interface.name}} impl, string path = "/{{interface.qualified_name|replace(".","/")}}") {
            _impl = impl;
            _Path = path;
            {% for property in interface.properties %}
            _impl.{{property.name}}Changed += args => PropertiesChanged?.Invoke(PropertyChanges.ForProperty("{{property.name}}", args));
	        {% endfor %}
            _impl.readyChanged += args => PropertiesChanged?.Invoke(PropertyChanges.ForProperty("ready", args));
            {% for signal in interface.signals %}
            _impl.{{signal.name}} += args => {{signal.name}}?.Invoke(args);
            {% endfor %}
        }

        public async Task RegisterObject(Connection conn) {
            (await facenet.ObjectManager.Manager(conn)).RegisterObject(_Path, new Dictionary<string, IDictionary<string, object>>());
            await conn.RegisterObjectAsync(this);
        }

        public async Task UnregisterObject(Connection conn) {
            (await facenet.ObjectManager.Manager(conn)).UnregisterObject(_Path, new string[]{});
            conn.UnregisterObject(this);
        }

        {% for property in interface.properties %}
        public virtual {{property.facenet_type}} {{property.name}}
        {
            get => _impl.{{property.name}};
            set => _impl.Set{{property.name}}(value);
        }
	    {% endfor %}
        public virtual bool ready
        {
            get => _impl.ready;
            set => _impl.SetReady(value);
        }
	
        {% for operation in interface.operations %}
        public Task{% if operation.has_return_value %}<{{operation.facenet_type}}>{% endif %} {{operation.name}}Async({%- for parameter in operation.parameters -%} {{parameter.facenet_type}} {{parameter.name}}{{ ", " if not loop.last else "" }}{% endfor %})
        {
            return _impl.{{operation.name}}Async({%- for parameter in operation.parameters -%}{{parameter.name}}{{ ", " if not loop.last else "" }}{% endfor %});
        }
        {% endfor %}

        {% for signal in interface.signals %}
        public event Action<{{signal.name}}Args> {{signal.name}};

        public Task<IDisposable> Watch{{signal.name}}Async(Action<{{signal.name}}Args> handler)
        {
            return SignalWatcher.AddAsync(this, "{{signal.name}}", handler);
        }
        {% endfor %}

        public Task<{{interface.name}}Properties> GetAllAsync()
        {
            return Task.FromResult(_impl.Properties);
        }

        public Task<object> GetAsync(string prop)
        {
            object val = null;
            {% for property in interface.properties %}
            {{ "else " if not loop.first else "" }}if (prop == "{{property.name}}") {
                val = _impl.{{property.name}};
            }
	        {% endfor %}
            if (prop == "ready") {
                val = _impl.ready;
            }
            return Task.FromResult(val);
        }

        public Task SetAsync(string prop, object val)
        {
            {% for property in interface.properties %}
            {% if not property.readonly %}
            {{ "else " if not loop.first else "" }}if (prop == "{{property.name}}") {
                if (val is {{property.facenet_type}}) {
                    _impl.{{property.name}} = ({{property.facenet_type}}) val;
                }
            }
            {% endif %}
	        {% endfor %}
            return Task.CompletedTask;
        }

        public Task<IDisposable> WatchPropertiesAsync(Action<PropertyChanges> handler)
        {
            return SignalWatcher.AddAsync(this, nameof(PropertiesChanged), handler);
        }

        public event Action<PropertyChanges> PropertiesChanged;
    }
}
