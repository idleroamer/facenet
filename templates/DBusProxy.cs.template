// Code generated by facenet. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Tmds.DBus;

namespace {{module.qualified_name}}
{
    public class {{interface.name}}DBusProxy
    {
        private I{{interface.name}} TmdsProxy;
        protected static ObjectPath _DefaultPath = new ObjectPath("/{{interface.qualified_name|replace(".","/")}}");
        private readonly ObjectPath _Path;
        private {{interface.name}}Properties _Properties = default ({{interface.name}}Properties);

        public {{interface.name}}DBusProxy(Connection conn, string serviceName, string path = "/{{interface.qualified_name|replace(".","/")}}" ) {
            _Path = path;
            TmdsProxy = conn.CreateProxy<I{{interface.name}}>(serviceName, path);
            Task.Run(async () =>
            {
                _Properties = await TmdsProxy.GetAllAsync();
            }).Wait();
            {% for signal in interface.signals %}
            TmdsProxy.Watch{{signal.name}}Async(args => {{signal.name}}?.Invoke(args));
            {% endfor %}
            TmdsProxy.WatchPropertiesAsync(propertyChanges => {
                foreach (KeyValuePair<string, object> changed in propertyChanges.Changed)
                {_Properties.GetType().GetProperty(changed.Key)?.SetValue(_Properties, changed.Value);}
            });

        }

        public ObjectPath ObjectPath { get => _Path;}

        {% for property in interface.properties %}
        public {{property.facenet_type}} {{property.name}}
        {
            get => _Properties.{{property.name}};
            {% if not property.readonly %}
            set {
                if (_Properties.{{property.name}} != value) {
                    TmdsProxy.SetAsync("{{property.name}}", value);
                }
            }
            {% endif %}
        }
	    {% endfor %}

        {% for operation in interface.operations %}
        public Task{% if operation.has_return_value %}<{{operation.facenet_type}}>{% endif %} {{operation.name}}Async({%- for parameter in operation.parameters -%} {{parameter.facenet_type}} {{parameter.name}}{{ ", " if not loop.last else "" }}{% endfor %}) {
            return TmdsProxy.{{operation.name}}Async({%- for parameter in operation.parameters -%}{{parameter.name}}{{ ", " if not loop.last else "" }}{% endfor %});
        }
        {% endfor %}

        {% for signal in interface.signals %}
        public event Action<{{signal.name}}Args> {{signal.name}};
        {% endfor %}
    }
}
