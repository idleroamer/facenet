// Code generated by facenet. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Tmds.DBus;

namespace {{module.qualified_name}}
{
    [Dictionary]
    public class {{interface.name}}Properties
    {
        {% for property in interface.properties %}
	    private {{property.facenet_type}} _{{property.name}} = default ({{property.facenet_type}});
	    public {{property.facenet_type}} {{property.name}}
        {
            get => _{{property.name}};
            set => _{{property.name}} = value;
        }
	    {% endfor %}
    }

    public abstract class {{interface.name}}DBusAdapter : I{{interface.name}}
    {
        protected static ObjectPath _Path = new ObjectPath("/{{interface.qualified_name|replace(".","/")}}");
        protected {{interface.name}}Properties _Properties = default ({{interface.name}}Properties);

        protected {{interface.name}}DBusAdapter() {
            _Properties = new {{interface.name}}Properties();
        }

        protected {{interface.name}}Properties Properties { get => _Properties; }

        public ObjectPath ObjectPath { get => _Path;}

        {% for operation in interface.operations %}
        public abstract Task{% if operation.has_return_value %}<{{operation.facenet_type}}>{% endif %} {{operation.name}}Async({%- for parameter in operation.parameters -%} {{parameter.facenet_type}} {{parameter.name}}{{ ", " if not loop.last else "" }}{% endfor %});
        {% endfor %}

        {% for signal in interface.signals %}
        public event Action<{{signal.name}}Args> On{{signal.name}};
        protected virtual void Raise{{signal.name}}({{signal.name}}Args args)
        {
            On{{signal.name}}?.Invoke(args);
        }
        public Task<IDisposable> Watch{{signal.name}}Async(Action<{{signal.name}}Args> handler)
        {
            return SignalWatcher.AddAsync(this, nameof(On{{signal.name}}), handler);
        }
        {% endfor %}

        public Task<{{interface.name}}Properties> GetAllAsync()
        {
            return Task.FromResult(Properties);
        }

        public Task<object> GetAsync(string prop)
        {
            return Task.FromResult(Properties.GetType().GetProperty(prop)?.GetValue(Properties));
        }

        public Task SetAsync(string prop, object val)
        {
            Properties.GetType().GetProperty(prop)?.SetValue(Properties, val);
            return Task.CompletedTask;
        }

        public Task<IDisposable> WatchPropertiesAsync(Action<PropertyChanges> handler)
        {
            return SignalWatcher.AddAsync(this, nameof(OnPropertiesChanged), handler);
        }

        public event Action<PropertyChanges> OnPropertiesChanged;
    }
}
