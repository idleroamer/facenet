// Code generated by facenet. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Tmds.DBus;
using facenet;

namespace {{module.qualified_name}}
{
    public class {{interface.name}}DBusProxy
    {
        private I{{interface.name}} TmdsProxy;
        protected static ObjectPath _DefaultPath = new ObjectPath("/{{interface.qualified_name|replace(".","/")}}");
        private string _serviceName;
        private readonly ObjectPath _Path;
        private {{interface.name}}Properties _Properties;
        private Connection _conn;
        private bool _noObjectManagement = false;

        public {{interface.name}}DBusProxy(Connection conn, string path = "/{{interface.qualified_name|replace(".","/")}}") {
            _Path = path;
            _conn = conn;
            _Properties = new {{interface.name}}Properties();
        }

        public async Task Connect(string serviceName)
        {
            if (!string.IsNullOrWhiteSpace(serviceName)) {
                _noObjectManagement = true;
                _serviceName = serviceName;
            }
            else {
                _noObjectManagement = false;
                (await ObjectManager.Manager(_conn)).InterfacesAdded += args => {
                    if (args.objectPath == _Path) {
                        RefreshConnection();
                    }
                };
                (await ObjectManager.Manager(_conn)).InterfacesRemoved += args => {
                    if (args.objectPath == _Path) {
                        RefreshConnection();
                    }
                };
            }
            await RefreshConnection();
        }

        private async Task RefreshConnection()
        {
            if (!_noObjectManagement) {
                _serviceName = (await ObjectManager.Manager(_conn)).ObjectService(_Path);
            }
            if (!string.IsNullOrWhiteSpace(_serviceName))
            {
                TmdsProxy = _conn.CreateProxy<IAddressBook>(_serviceName, _Path);
                {% for signal in interface.signals %}
                await TmdsProxy.Watch{{signal.name}}Async(args => {{signal.name}}?.Invoke(args));
                {% endfor %}
                await TmdsProxy.WatchPropertiesAsync(propertyChanges =>
                {
                    foreach (KeyValuePair<string, object> changed in propertyChanges.Changed)
                    { _Properties.GetType().GetProperty(changed.Key)?.SetValue(_Properties, changed.Value); }
                    if (propertyChanges.Changed.Length != 0) {
                        OnPropertiesChanged?.Invoke(propertyChanges);
                    }
                });
                await GetAllProperties();
            }
            // TODO set ready to false
        }

        private async Task GetAllProperties()
        {
            var properties = await TmdsProxy.GetAllAsync();
            List<KeyValuePair<string, object>> changedProperties = new List<KeyValuePair<string, object>>();
            {% for property in interface.properties %}
            if (_Properties.{{property.name}} != properties.{{property.name}}) 
            {
                _Properties.{{property.name}} = properties.{{property.name}};
                changedProperties.Add(new KeyValuePair<string, object>("{{property.name}}", properties.{{property.name}}));
            }
            {% endfor %}
            if (_Properties.ready != properties.ready) 
            {
                _Properties.ready = properties.ready;
                changedProperties.Add(new KeyValuePair<string, object>("ready", properties.ready));
            }
            if (changedProperties.Count != 0) {
                OnPropertiesChanged?.Invoke(new PropertyChanges(changedProperties.ToArray()));
            }
        }

        public ObjectPath ObjectPath { get => _Path;}

        {% for property in interface.properties %}
        public {{property.facenet_type}} {{property.name}}
        {
            get => _Properties.{{property.name}};
            {% if not property.readonly %}
            set {
                if (_Properties.{{property.name}} != value) {
                    TmdsProxy.SetAsync("{{property.name}}", value);
                }
            }
            {% endif %}
        }
	    {% endfor %}
        public bool ready
        {
            get => _Properties.ready;
        }

        {% for operation in interface.operations %}
        public Task{% if operation.has_return_value %}<{{operation.facenet_type}}>{% endif %} {{operation.name}}Async({%- for parameter in operation.parameters -%} {{parameter.facenet_type}} {{parameter.name}}{{ ", " if not loop.last else "" }}{% endfor %}) {
            return TmdsProxy.{{operation.name}}Async({%- for parameter in operation.parameters -%}{{parameter.name}}{{ ", " if not loop.last else "" }}{% endfor %});
        }
        {% endfor %}

        {% for signal in interface.signals %}
        public event Action<{{signal.name}}Args> {{signal.name}};
        {% endfor %}

        public event Action<PropertyChanges> OnPropertiesChanged;
    }
}
