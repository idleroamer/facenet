// Code generated by facenet. DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Tmds.DBus;
using facenet;

namespace {{module.qualified_name}}
{
    [Dictionary]
    public class {{interface.name}}Properties
    {
        {% for property in interface.properties %}
        {% if property.readonly %}
        [Property(Access = PropertyAccess.Read)]
        {% endif %}
	    public {{property.facenet_type}} {{property.name}};
	    {% endfor %}
        [Property(Access = PropertyAccess.Read)]
        public bool ready;
    }

    public abstract class {{interface.name}}DBusAdapter : I{{interface.name}}
    {
        protected static ObjectPath _DefaultPath = new ObjectPath("/{{interface.qualified_name|replace(".","/")}}");
        private readonly ObjectPath _Path;
	    protected {{interface.name}}Properties _Properties = default ({{interface.name}}Properties);

        protected {{interface.name}}DBusAdapter(string path = "/{{interface.qualified_name|replace(".","/")}}") {
            _Properties = new {{interface.name}}Properties();
            _Properties.ready = true;
            _Path = path;
        }

        public async Task RegisterObject(Connection conn) {
            (await facenet.ObjectManager.Manager(conn)).RegisterObject(_Path, new Dictionary<string, IDictionary<string, object>>());
            await conn.RegisterObjectAsync(this);
        }

        public async Task UnregisterObject(Connection conn) {
            (await facenet.ObjectManager.Manager(conn)).UnregisterObject(_Path, new string[]{});
            conn.UnregisterObject(this);
        }

        {% for property in interface.properties %}
        public virtual {{property.facenet_type}} {{property.name}}
        {
            get => _Properties.{{property.name}};
            set {
                if (_Properties.{{property.name}} != value) {
                    _Properties.{{property.name}} = value;
                    OnPropertiesChanged?.Invoke(PropertyChanges.ForProperty("{{property.name}}", value));
                }
            }
        }
	    {% endfor %}
        public virtual bool ready
        {
            get => _Properties.ready;
            set {
                if (_Properties.ready != value) {
                    _Properties.ready = value;
                    OnPropertiesChanged?.Invoke(PropertyChanges.ForProperty("ready", value));
                }
            }
        }
	
	    public ObjectPath ObjectPath { get => _Path;}

        {% for operation in interface.operations %}
        public abstract Task{% if operation.has_return_value %}<{{operation.facenet_type}}>{% endif %} {{operation.name}}Async({%- for parameter in operation.parameters -%} {{parameter.facenet_type}} {{parameter.name}}{{ ", " if not loop.last else "" }}{% endfor %});
        {% endfor %}

        {% for signal in interface.signals %}
        public event Action<{{signal.name}}Args>{{signal.name}};
        protected virtual void Emit{{signal.name}}({{signal.name}}Args args)
        {
            {{signal.name}}?.Invoke(args);
        }
        public Task<IDisposable> Watch{{signal.name}}Async(Action<{{signal.name}}Args> handler)
        {
            return SignalWatcher.AddAsync(this, "{{signal.name}}", handler);
        }
        {% endfor %}

        public Task<{{interface.name}}Properties> GetAllAsync()
        {
            return Task.FromResult(_Properties);
        }

        public Task<object> GetAsync(string prop)
        {
            object val = null;
            {% for property in interface.properties %}
            {{ "else " if not loop.first else "" }}if (prop == "{{property.name}}") {
                val = _Properties.{{property.name}};
            }
	        {% endfor %}
            if (prop == "ready") {
                val = _Properties.ready;
            }
            return Task.FromResult(val);
        }

        public Task SetAsync(string prop, object val)
        {
            bool propChanged = false;
            {% for property in interface.properties %}
            {% if not property.readonly %}
            {{ "else " if not loop.first else "" }}if (prop == "{{property.name}}") {
                if (val is {{property.facenet_type}} && _Properties.{{property.name}} != ({{property.facenet_type}}) val) {
                    _Properties.{{property.name}} = ({{property.facenet_type}}) val;
                    propChanged = true;
                }
            }
            {% endif %}
	        {% endfor %}
	        if (propChanged) {
	            OnPropertiesChanged?.Invoke(PropertyChanges.ForProperty(prop, val));
	        }
            return Task.CompletedTask;
        }

        public Task<IDisposable> WatchPropertiesAsync(Action<PropertyChanges> handler)
        {
            return SignalWatcher.AddAsync(this, nameof(OnPropertiesChanged), handler);
        }

        public event Action<PropertyChanges> OnPropertiesChanged;
    }
}
